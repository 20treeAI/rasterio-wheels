diff --git a/autotest/gcore/numpy_rw.py b/autotest/gcore/numpy_rw.py
index 868520fcadc..14cb7f147e1 100755
--- a/autotest/gcore/numpy_rw.py
+++ b/autotest/gcore/numpy_rw.py
@@ -200,9 +200,7 @@ def test_numpy_rw_9():
 def test_numpy_rw_10():
 
     ds = gdal.GetDriverByName('GTiff').Create('/vsimem/signed8.tif', 2, 1, options=['PIXELTYPE=SIGNEDBYTE'])
-    ar = numpy.empty([1, 2], dtype=numpy.int8)
-    ar[0][0] = -128
-    ar[0][1] = 127
+    ar = numpy.array([[-128, 127]], dtype=numpy.int8)
     ds.GetRasterBand(1).WriteArray(ar)
     ds = None
 
@@ -218,6 +216,27 @@ def test_numpy_rw_10():
 
     assert ar3[0][0] == -128 and ar3[0][1] == 127, 'did not get expected result (2)'
 
+###############################################################################
+# Test signed byte handling with all values set to nodata
+
+
+@pytest.mark.parametrize("options", [[], ['SPARSE_OK=YES']])
+def test_numpy_rw_10_bis(options):
+    """Reproduce https://github.com/mapbox/rasterio/issues/2180"""
+    ds = gdal.GetDriverByName('GTiff').Create('/vsimem/signed8.tif', 2, 1,
+                                              options=['PIXELTYPE=SIGNEDBYTE']+options)
+    ar = numpy.array([[-1, -1]], dtype=numpy.int8)
+    ds.GetRasterBand(1).WriteArray(ar)
+    ds.GetRasterBand(1).SetNoDataValue(-1)
+    ds = None
+
+    ds = gdal.Open('/vsimem/signed8.tif')
+    ar2 = ds.ReadAsArray()
+    ds = None
+    gdal.Unlink('/vsimem/signed8.tif')
+
+    assert ar2[0][0] == -1 and ar2[0][1] == -1
+
 ###############################################################################
 # Test all datatypes
 
diff --git a/gdal/frmts/gtiff/geotiff.cpp b/gdal/frmts/gtiff/geotiff.cpp
index 264759aae49..15d3cf8fb19 100644
--- a/gdal/frmts/gtiff/geotiff.cpp
+++ b/gdal/frmts/gtiff/geotiff.cpp
@@ -5948,7 +5948,7 @@ void GTiffRasterBand::NullBlock( void *pData )
     const int nChunkSize = std::max(1, GDALGetDataTypeSizeBytes(eDataType));
 
     int bNoDataSetIn = FALSE;
-    const double dfNoData = GetNoDataValue( &bNoDataSetIn );
+    double dfNoData = GetNoDataValue( &bNoDataSetIn );
     if( !bNoDataSetIn )
     {
 #ifdef ESRI_BUILD
@@ -5962,6 +5962,17 @@ void GTiffRasterBand::NullBlock( void *pData )
     }
     else
     {
+        // Hack for Signed Int8 case. As the data type is GDT_Byte (unsigned),
+        // we have to convert a negative nodata value in the range [-128,-1] in
+        // [128, 255]
+        if( m_poGDS->m_nBitsPerSample == 8 &&
+            m_poGDS->m_nSampleFormat == SAMPLEFORMAT_INT &&
+            dfNoData < 0 && dfNoData >= -128 &&
+            static_cast<int>(dfNoData) == dfNoData )
+        {
+            dfNoData = 256 + dfNoData;
+        }
+
         // Will convert nodata value to the right type and copy efficiently.
         GDALCopyWords64( &dfNoData, GDT_Float64, 0,
                        pData, eDataType, nChunkSize, nWords);
@@ -8128,7 +8139,20 @@ void GTiffDataset::FillEmptyTiles()
         if( nDataTypeSize &&
             nDataTypeSize * 8 == static_cast<int>(m_nBitsPerSample) )
         {
-            GDALCopyWords64( &m_dfNoDataValue, GDT_Float64, 0,
+            double dfNoData = m_dfNoDataValue;
+
+            // Hack for Signed Int8 case. As the data type is GDT_Byte (unsigned),
+            // we have to convert a negative nodata value in the range [-128,-1] in
+            // [128, 255]
+            if( m_nBitsPerSample == 8 &&
+                m_nSampleFormat == SAMPLEFORMAT_INT &&
+                dfNoData < 0 && dfNoData >= -128 &&
+                static_cast<int>(dfNoData) == dfNoData )
+            {
+                dfNoData = 256 + dfNoData;
+            }
+
+            GDALCopyWords64( &dfNoData, GDT_Float64, 0,
                            pabyData, eDataType,
                            nDataTypeSize,
                            nBlockBytes / nDataTypeSize );
